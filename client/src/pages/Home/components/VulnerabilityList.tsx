import React, { useMemo } from 'react';
import { useVulnerabilities } from '../../../hooks/useVulnerabilities';
import axios from '../../../apis/getVulnerabilities';
import { VulnerabilityCard } from './VulnerabilityCard';
import { Accordion, AccordionSummary, Typography, AccordionDetails, Container } from '@mui/material';
import { ExpandMore } from '@mui/icons-material';

const VulnerabilityList = () => {
  const [vulnerabilities, error, loading] = useVulnerabilities({
    axiosInstance: axios,
    method: 'get',
    url: 'vulnerabilities',
  });

  const criticalVulnerability = useMemo(() => {
    return vulnerabilities?.filter((vulnerability: any) => vulnerability.severity === 'CRITICAL') || [];
  }, [vulnerabilities]);

  const highVulnerability = useMemo(() => {
    return vulnerabilities?.filter((vulnerability: any) => vulnerability.severity === 'HIGH') || [];
  }, [vulnerabilities]);

  const mediumVulnerability = useMemo(() => {
    return vulnerabilities?.filter((vulnerability: any) => vulnerability.severity === 'MEDIUM') || [];
  }, [vulnerabilities]);

  const lowVulnerability = useMemo(() => {
    return vulnerabilities?.filter((vulnerability: any) => vulnerability.severity === 'LOW') || [];
  }, [vulnerabilities]);

  return (
    <>
      {
        loading && <Container sx={{ left: 0, right: 0, position: 'relative' }} maxWidth='xl' >
          <p>loading...</p>
          {error && !loading && <p>Error</p>}
        </Container>
      }

      {
        error && !loading && <Container sx={{ left: 0, right: 0, position: 'relative' }} maxWidth='xl' >
          <p>Error</p>
        </Container>
      }
      {!error && !loading &&
        <Container sx={{ left: 0, right: 0, position: 'relative' }} maxWidth='xl' >
          <Accordion>
            <AccordionSummary
              aria-controls="panel1a-content"
              id="panel1a-header"
              expandIcon={<ExpandMore />}
            >
              <Typography>Critical</Typography>
            </AccordionSummary>
            <AccordionDetails>
              {!error && !loading && vulnerabilities && criticalVulnerability.map((vulnerability: any) => (
                <VulnerabilityCard vulnerability={vulnerability} key={vulnerability.uuid} />
              ))}
            </AccordionDetails>
          </Accordion>

          <Accordion>
            <AccordionSummary
              aria-controls="panel1a-content"
              id="panel1a-header"
              expandIcon={<ExpandMore />}
            >
              <Typography>High</Typography>
            </AccordionSummary>
            {!error && !loading && vulnerabilities && highVulnerability.map((vulnerability: any) => (
              <VulnerabilityCard vulnerability={vulnerability} key={vulnerability.uuid} />
            ))}
            <AccordionDetails>

            </AccordionDetails>

          </Accordion>

          <Accordion>
            <AccordionSummary
              aria-controls="panel1a-content"
              id="panel1a-header"
              expandIcon={<ExpandMore />}
            >
              <Typography>Medium</Typography>

            </AccordionSummary>
            <AccordionDetails>
              {!error && !loading && vulnerabilities && mediumVulnerability.map((vulnerability: any) => (
                <VulnerabilityCard vulnerability={vulnerability} key={vulnerability.uuid} />
              ))}
            </AccordionDetails>
          </Accordion>

          <Accordion>
            <AccordionSummary
              aria-controls="panel1a-content"
              id="panel1a-header"
              expandIcon={<ExpandMore />}
            >
              <Typography>Low</Typography>

            </AccordionSummary>
            <AccordionDetails>
              {!error && !loading && vulnerabilities && lowVulnerability.map((vulnerability: any) => (
                <VulnerabilityCard vulnerability={vulnerability} key={vulnerability.uuid} />
              ))}
            </AccordionDetails>
          </Accordion>
        </Container>
      }
    </>
  )
};

export default VulnerabilityList;
